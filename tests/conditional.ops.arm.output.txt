    ; assembly                                       | /* jsdec pseudo code output */
                                                     | /* testsuite @ 0x0 */
                                                     | #include <stdint.h>
                                                     |  
    ; (fcn) main ()                                  | int32_t main (int32_t arg4) {
                                                     |     int32_t local_0h;
                                                     |     r3 = arg4;
    0x00017dc4 cmp r8, lr                            |     
    0x00017dc8 mov r3, 0                             |     r3 = 0;
    0x00017dcc ldr r5, [pc, 0x3e8]                   |     r5 = *((uint32_t*) 0x181b8);
    0x00017dd0 mov r4, 1                             |     r4 = 1;
    0x00017dd4 sub sp, sp, 0x24                      |     
    0x00017dd8 mov r8, r0                            |     r8 = r0;
    0x00017ddc mov r6, r1                            |     r6 = r1;
    0x00017de0 mov sl, r4                            |     sl = r4;
    0x00017de4 str r3, [r5, 4]                       |     *((uint32_t*) (r5 + 4)) = r3;
    0x00017de8 str r3, [r5, 0xbe8]                   |     *((uint32_t*) (r5 + 0xbe8)) = r3;
    0x00017dec str r3, [r5, 0xbec]                   |     *((uint32_t*) (r5 + 0xbec)) = r3;
    0x00017df0 b 0x17e40                             |     
                                                     |     while (r3 == 0x2d) {
    0x00017df4 mov r0, r7                            |         r0 = r7;
    0x00017df8 ldr r1, [pc, 0x3c0]                   |         r1 = *((uint32_t*) 0x000181c0);
    0x00017dfc bl 0xe7cc                             |         r0 = strcmp (r0, r1);
    0x00017e00 cmp r0, 0                             |         
                                                     |         if (r0 != 0) {
    0x00017e04 streq sl, [r5, 4]                     |             *((uint32_t*) (r5 + 4)) = sl;
                                                     |         }
                                                     |         if (r0 != 0) {
    0x00017e08 beq 0x17e3c                           |             
    0x00017e0c mov r0, r7                            |             r0 = r7;
    0x00017e10 ldr r1, [pc, 0x3ac]                   |             r1 = *((uint32_t*) 0x000181c4);
    0x00017e14 bl 0xe7cc                             |             r0 = strcmp (r0, r1);
    0x00017e18 cmp r0, 0                             |             
                                                     |             if (r0 != 0) {
    0x00017e1c bne 0x17e3c                           |                 goto label_1;
                                                     |             }
    0x00017e20 add r3, r4, 1                         |             r3 = r4 + 1;
    0x00017e24 cmp r3, r8                            |             
                                                     |             if (r3 >= r8) {
    0x00017e28 ldrlt r2, [r6, r3, lsl 2]             |                 offset_0 = r3 << 2;
                                                     |                 r2 = *((uint32_t*) (r6 + offset_0));
                                                     |             }
                                                     |             if (r3 >= r8) {
    0x00017e2c addlt r4, r3, 1                       |                 r4 = r3 + 1;
                                                     |             }
                                                     |             if (r3 >= r8) {
    0x00017e30 strlt r2, [r5, 0xbe8]                 |                 *((uint32_t*) (r5 + 0xbe8)) = r2;
                                                     |             }
                                                     |             if (r3 >= r8) {
    0x00017e34 ldrlt r3, [r6, r4, lsl 2]             |                 offset_1 = r4 << 2;
                                                     |                 r3 = *((uint32_t*) (r6 + offset_1));
                                                     |             }
                                                     |             if (r3 < r8) {
    0x00017e38 strlt r3, [r5, 0xbec]                 |                 *((uint32_t*) (r5 + 0xbec)) = r3;
                                                     |                 goto label_1;
                                                     |             }
                                                     |         }
                                                     | label_1:
    0x00017e3c add r4, r4, 1                         |         r4++;
    0x00017e40 cmp r4, r8                            |         
                                                     |         if (r4 >= r8) {
    0x00017e44 bge 0x17e58                           |             goto label_2;
                                                     |         }
    0x00017e48 ldr r7, [r6, r4, lsl 2]               |         offset_2 = r4 << 2;
                                                     |         r7 = *((uint32_t*) (r6 + offset_2));
    0x00017e4c ldrsb r3, [r7]                        |         r3 = *((uint8_t*) r7);
    0x00017e50 cmp r3, 0x2d                          |         
    0x00017e54 beq 0x17df4                           |         
                                                     |     }
                                                     | label_2:
    0x00017e58 ldr r0, [pc, 0x368]                   |     r0 = "/tmp/shm_id";
    0x00017e5c mov r1, 0                             |     r1 = 0;
    0x00017e60 bl 0xdea8                             |     r0 = access ("/tmp/shm_id", r1);
    0x00017e64 cmp r0, 0                             |     
                                                     |     if (r0 == 0) {
    0x00017e68 bne 0x17e98                           |         
    0x00017e6c ldr r0, [pc, 0x354]                   |         r0 = "/tmp/shm_id";
    0x00017e70 ldr r1, [pc, 0x354]                   |         r1 = *((uint32_t*) 0x000181cc);
    0x00017e74 bl 0xe034                             |         r0 = fopen ("/tmp/shm_id", r1);
    0x00017e78 cmp r0, 0                             |         
                                                     |         if (r0 != 0) {
    0x00017e7c beq 0x17e90                           |             
    0x00017e80 ldr r1, [pc, 0x348]                   |             r1 = *((uint32_t*) 0x000181d0);
    0x00017e84 ldr r2, [pc, 0x348]                   |             r2 = *((uint32_t*) 0x181d0);
    0x00017e88 bl 0xe9f4                             |             fscanf (r0, r1, r2);
    0x00017e8c b 0x17f4c                             |             goto label_3;
                                                     |         }
    0x00017e90 ldr r0, [pc, 0x340]                   |         r0 = "/tmp/shm_id open failed";
    0x00017e94 b 0x17f34                             |         
                                                     |     } else {
    0x00017e98 ldr r4, [pc, 0x33c]                   |         r4 = *((uint32_t*) 0x181d8);
    0x00017e9c mov r1, 0x6400                        |         r1 = 0x6400;
    0x00017ea0 mov r2, 0x780                         |         r2 = 0x780;
    0x00017ea4 mov r0, 0                             |         r0 = 0;
    0x00017ea8 bl 0xe1a8                             |         shmget (r0, r1, r2);
    0x00017eac ldr r1, [pc, 0x32c]                   |         r1 = *((uint32_t*) 0x000181e0);
    0x00017eb0 str r0, [r4, 0xb70]                   |         *((uint32_t*) (r4 + 0xb70)) = r0;
    0x00017eb4 ldr r0, [pc, 0x30c]                   |         r0 = "/tmp/shm_id";
    0x00017eb8 bl 0xe034                             |         r0 = fopen (r0, r1);
    0x00017ebc subs r5, r0, 0                        |         r5 = r0 - 0;
                                                     |         if (r5 != r0) {
    0x00017ec0 beq 0x17f30                           |             
    0x00017ec4 ldr r1, [r4, 0xb70]                   |             r1 = *((uint32_t*) (r4 + 0xb70));
    0x00017ec8 cmn r1, 1                             |             
                                                     |             if (r1 == 1) {
    0x00017ecc beq 0x17f30                           |                 goto label_4;
                                                     |             }
    0x00017ed0 ldr r0, [pc, 0x30c]                   |             r0 = "shm ID: %d\n";
    0x00017ed4 bl 0xe994                             |             printf ("shm ID: %d\n");
    0x00017ed8 ldr r2, [r4, 0xb70]                   |             r2 = *((uint32_t*) (r4 + 0xb70));
    0x00017edc mov r0, r5                            |             r0 = r5;
    0x00017ee0 ldr r1, [pc, 0x2e8]                   |             r1 = *((uint32_t*) 0x000181d0);
    0x00017ee4 bl 0xe514                             |             fprintf (r0, r1, r2);
    0x00017ee8 mov r0, r5                            |             r0 = r5;
    0x00017eec bl 0xdf80                             |             fclose (r0);
    0x00017ef0 ldr r0, [r4, 0xb70]                   |             r0 = *((uint32_t*) (r4 + 0xb70));
    0x00017ef4 mov r1, 0                             |             r1 = 0;
    0x00017ef8 ldr r4, [pc, 0x2bc]                   |             r4 = *((uint32_t*) 0x181b8);
    0x00017efc mov r2, r1                            |             r2 = r1;
    0x00017f00 bl 0xe2b0                             |             shmat (r0, r1, r2);
    0x00017f04 movw r1, 0x7b6                        |             r1 = 0x7b6;
    0x00017f08 mov r5, r0                            |             r5 = r0;
    0x00017f0c str r0, [r4, 0xbd4]                   |             *((uint32_t*) (r4 + 0xbd4)) = r0;
    0x00017f10 ldr r0, [pc, 0x2d0]                   |             r0 = *((uint32_t*) 0x181e4);
    0x00017f14 bl 0xf6b8                             |             void (*0xf6b8)(uint32_t, uint32_t) (r0, r1);
    0x00017f18 ldr r3, [r4, 0xbd4]                   |             r3 = *((uint32_t*) 0x18d8c);
    0x00017f1c str r0, [r5]                          |             *((uint32_t*) r5) = r0;
    0x00017f20 ldr r0, [r3]                          |             r0 = *((uint32_t*) 0x18d8c);
    0x00017f24 cmn r0, 1                             |             
                                                     |             if (r0 != 1) {
    0x00017f28 bne 0x17f48                           |                 goto label_5;
                                                     |             }
    0x00017f2c b 0x17f40                             |             goto label_6;
                                                     |         }
                                                     | label_4:
    0x00017f30 ldr r0, [pc, 0x2b4]                   |         r0 = "/tmp/shm_id opened error!";
                                                     |     }
                                                     |     do {
                                                     | label_0:
    0x00017f34 bl 0xe9e8                             |         puts ("/tmp/shm_id opened error!");
    0x00017f38 mov r0, 1                             |         r0 = 1;
    0x00017f3c bl 0xe718                             |         exit (r0);
                                                     | label_6:
    0x00017f40 ldr r0, [pc, 0x2a8]                   |         r0 = "Semaphore Create Failed.";
    0x00017f44 b 0x17f34                             |         
                                                     |     } while (1);
                                                     | label_5:
    0x00017f48 bl 0xf6dc                             |     void (*0xf6dc)(char*) ("/tmp/shm_id opened error!");
                                                     | label_3:
    0x00017f4c ldr r4, [pc, 0x268]                   |     r4 = *((uint32_t*) 0x181b8);
    0x00017f50 ldr r1, [r4, 0xbd4]                   |     r1 = *((uint32_t*) 0x18d8c);
    0x00017f54 cmp r1, 0                             |     
                                                     |     if (r1 == 0) {
    0x00017f58 bne 0x17f70                           |         
    0x00017f5c ldr r3, [pc, 0x278]                   |         r3 = *((uint32_t*) 0x181d8);
    0x00017f60 mov r2, r1                            |         r2 = r1;
    0x00017f64 ldr r0, [r3, 0xb70]                   |         r0 = *((uint32_t*) 0x18d48);
    0x00017f68 bl 0xe2b0                             |         shmat (r0, r1, r2);
    0x00017f6c str r0, [r4, 0xbd4]                   |         *((uint32_t*) (r4 + 0xbd4)) = r0;
                                                     |     }
    0x00017f70 ldr r3, [pc, 0x264]                   |     r3 = *((uint32_t*) 0x181d8);
    0x00017f74 ldr r1, [r3, 0xb70]                   |     r1 = *((uint32_t*) 0x18d48);
    0x00017f78 cmn r1, 1                             |     
                                                     |     if (r1 != 1) {
    0x00017f7c beq 0x18024                           |         
    0x00017f80 ldr r3, [pc, 0x234]                   |         
    0x00017f84 ldr r3, [r3, 0xbd4]                   |         r3 = *((uint32_t*) 0x18d8c);
    0x00017f88 ldr r2, [r3]                          |         r2 = *((uint32_t*) 0x18d8c);
    0x00017f8c cmn r2, 1                             |         
                                                     |         if (r2 != 1) {
    0x00017f90 beq 0x18024                           |             
    0x00017f94 mov r0, 0                             |             r0 = 0;
    0x00017f98 str r0, [r3, 4]                       |             *((uint32_t*) (r3 + 4)) = r0;
    0x00017f9c ldr r0, [pc, 0x250]                   |             r0 = " Get a correct Segment_ID: %d and semaphore ID:%d\n";
    0x00017fa0 bl 0xe994                             |             r0 = printf (r0);
    0x00017fa4 bl 0x19690                            |             void (*0x19690)(uint32_t) (r0);
    0x00017fa8 mov r1, 1                             |             r1 = 1;
    0x00017fac mov r0, 0xd                           |             r0 = 0xd;
    0x00017fb0 bl 0xea18                             |             signal (r0);
    0x00017fb4 ldr r1, [pc, 0x23c]                   |             r1 = *((uint32_t*) 0x181f4);
    0x00017fb8 mov r0, 0xa                           |             r0 = 0xa;
    0x00017fbc bl 0xea18                             |             signal (r0);
    0x00017fc0 ldr r1, [pc, 0x230]                   |             r1 = *((uint32_t*) 0x181f4);
    0x00017fc4 mov r0, 0xc                           |             r0 = 0xc;
    0x00017fc8 bl 0xea18                             |             signal (r0);
    0x00017fcc ldr r1, [pc, 0x224]                   |             r1 = *((uint32_t*) 0x181f4);
    0x00017fd0 mov r0, 1                             |             r0 = 1;
    0x00017fd4 bl 0xea18                             |             signal (r0);
    0x00017fd8 ldr r1, [pc, 0x218]                   |             r1 = *((uint32_t*) 0x181f4);
    0x00017fdc mov r0, 0x11                          |             r0 = 0x11;
    0x00017fe0 bl 0xea18                             |             signal (r0);
    0x00017fe4 ldr r1, [pc, 0x20c]                   |             r1 = *((uint32_t*) 0x181f4);
    0x00017fe8 mov r0, 3                             |             r0 = 3;
    0x00017fec bl 0xea18                             |             signal (r0);
    0x00017ff0 ldr r1, [pc, 0x200]                   |             r1 = *((uint32_t*) 0x181f4);
    0x00017ff4 mov r0, 4                             |             r0 = 4;
    0x00017ff8 bl 0xea18                             |             signal (r0);
    0x00017ffc ldr r1, [pc, 0x1f4]                   |             r1 = *((uint32_t*) 0x181f4);
    0x00018000 mov r0, 0x1c                          |             r0 = 0x1c;
    0x00018004 bl 0xea18                             |             signal (r0);
    0x00018008 mov r0, 1                             |             r0 = 1;
    0x0001800c mov r1, r0                            |             r1 = r0;
    0x00018010 bl 0xd8cc                             |             r0 = daemon (r0, r1);
    0x00018014 cmn r0, 1                             |             
    0x00018018 mov r4, r0                            |             r4 = r0;
                                                     |             if (r0 != 1) {
    0x0001801c bne 0x18050                           |                 goto label_7;
                                                     |             }
    0x00018020 b 0x18040                             |             
                                                     |         }
                                                     |     } else {
    0x00018024 ldr r3, [pc, 0x190]                   |         
    0x00018028 ldr r0, [pc, 0x1cc]                   |         r0 = " Get a incorrect Segment_ID: %d and semaphore ID:%d\n";
    0x0001802c ldr r3, [r3, 0xbd4]                   |         r3 = *((uint32_t*) 0x18d8c);
    0x00018030 ldr r2, [r3]                          |         r2 = *((uint32_t*) 0x18d8c);
    0x00018034 bl 0xe994                             |         printf (" Get a incorrect Segment_ID: %d and semaphore ID:%d\n", r1, r2, r3);
    0x00018038 ldr r0, [pc, 0x1c0]                   |         r0 = "something wrong in getting shm_id. ";
    0x0001803c b 0x17f34                             |         goto label_0;
                                                     |     }
    0x00018040 ldr r0, [pc, 0x1bc]                   |     r0 = "daemon";
    0x00018044 bl 0xe490                             |     perror ("daemon");
    0x00018048 mov r0, r4                            |     r0 = r4;
    0x0001804c b 0x181b4                             |     goto label_8;
                                                     | label_7:
    0x00018050 ldr r0, [pc, 0x1b0]                   |     r0 = "/var/run/httpd.pid";
    0x00018054 ldr r1, [pc, 0x184]                   |     r1 = *((uint32_t*) 0x000181e0);
    0x00018058 bl 0xe034                             |     r0 = fopen ("/var/run/httpd.pid", r1);
    0x0001805c subs r4, r0, 0                        |     r4 = r0 - 0;
                                                     |     if (r4 == r0) {
    0x00018060 bne 0x18074                           |         
    0x00018064 ldr r0, [pc, 0x19c]                   |         r0 = "/var/run/httpd.pid";
    0x00018068 bl 0xe490                             |         perror ("/var/run/httpd.pid");
    0x0001806c mvn r0, 0                             |         r0 = ~0;
    0x00018070 b 0x181b4                             |         
                                                     |     } else {
    0x00018074 bl 0xdee4                             |         getpid ();
    0x00018078 ldr r1, [pc, 0x150]                   |         r1 = *((uint32_t*) 0x000181d0);
    0x0001807c mov r2, r0                            |         r2 = r0;
    0x00018080 mov r0, r4                            |         r0 = r4;
    0x00018084 bl 0xe514                             |         fprintf (r0, r1, r2);
    0x00018088 mov r0, r4                            |         r0 = r4;
    0x0001808c bl 0xdf80                             |         fclose (r0);
    0x00018090 ldr r0, [pc, 0x174]                   |         r0 = "restart_all_processes";
    0x00018094 ldr r1, [pc, 0x174]                   |         r1 = *((uint32_t*) 0x00018210);
    0x00018098 bl 0xd8d8                             |         r0 = acosNvramConfig_match ();
    0x0001809c cmp r0, 0                             |         
                                                     |         if (r0 != 0) {
    0x000180a0 beq 0x180a8                           |             
    0x000180a4 bl 0xe8a4                             |             agApi_clear_nat_for_httpd ();
                                                     |         }
    0x000180a8 ldr r0, [pc, 0x164]                   |         r0 = "sku_name";
    0x000180ac ldr r1, [pc, 0x164]                   |         r1 = *((uint32_t*) 0x00018218);
    0x000180b0 bl 0xd8d8                             |         r0 = acosNvramConfig_match ();
    0x000180b4 cmp r0, 0                             |         
                                                     |         if (r0 == 0) {
    0x000180b8 bne 0x180e4                           |             
    0x000180bc ldr r0, [pc, 0x150]                   |             r0 = "sku_name";
    0x000180c0 ldr r1, [pc, 0x154]                   |             r1 = *((uint32_t*) 0x18218);
    0x000180c4 bl 0xd8d8                             |             r0 = acosNvramConfig_match ();
    0x000180c8 cmp r0, 0                             |             
                                                     |             if (r0 == 0) {
    0x000180cc beq 0x180ec                           |                 goto label_9;
                                                     |             }
    0x000180d0 ldr r0, [pc, 0x148]                   |             r0 = "gui_region";
    0x000180d4 ldr r1, [pc, 0x148]                   |             r1 = *((uint32_t*) 0x18220);
    0x000180d8 bl 0xd8d8                             |             r0 = acosNvramConfig_match ();
    0x000180dc cmp r0, 0                             |             
                                                     |             if (r0 == 0) {
    0x000180e0 beq 0x180ec                           |                 goto label_9;
                                                     |             }
                                                     |         }
    0x000180e4 mov r2, 1                             |         r2 = 1;
    0x000180e8 b 0x180f0                             |         goto label_10;
                                                     | label_9:
    0x000180ec mov r2, 0                             |         r2 = 0;
                                                     | label_10:
    0x000180f0 ldr r3, [pc, 0xc4]                    |         r3 = *((uint32_t*) 0x181b8);
    0x000180f4 mov r1, 0                             |         r1 = 0;
    0x000180f8 add r0, sp, 4                         |         r0 = sp + 4;
    0x000180fc str r1, [sp]                          |         *((uint32_t*) sp) = r1;
    0x00018100 mov r4, sp                            |         r4 = sp;
    0x00018104 str r2, [r3, 0xbdc]                   |         *((uint32_t*) (r3 + 0xbdc)) = r2;
    0x00018108 mov r2, 0x1c                          |         r2 = 0x1c;
    0x0001810c bl 0xe43c                             |         memset (r0, r1, r2);
    0x00018110 ldr r0, [pc, 0x108]                   |         r0 = "gui_region";
    0x00018114 bl 0xe694                             |         r0 = acosNvramConfig_get ();
    0x00018118 mov r1, r0                            |         r1 = r0;
    0x0001811c mov r0, sp                            |         r0 = sp;
    0x00018120 bl 0xeae4                             |         strcpy (r0, r1);
    0x00018124 mov r0, sp                            |         r0 = sp;
    0x00018128 bl 0xa9f40                            |         puts_f40 (r0);
    0x0001812c ldr r0, [pc, 0xf4]                    |         r0 = "restart_httpd";
    0x00018130 ldr r1, [pc, 0xd8]                    |         r1 = *((uint32_t*) 0x00018210);
    0x00018134 bl 0xd8d8                             |         r0 = acosNvramConfig_match ();
    0x00018138 cmp r0, 0                             |         
                                                     |         if (r0 == 0) {
    0x0001813c bne 0x1819c                           |             
    0x00018140 bl 0x4a724                            |             memset_724 ();
    0x00018144 bl 0x4b0bc                            |             memset_bc ();
    0x00018148 bl 0x39e50                            |             agApi_fwURLFilterEnable_e50 ();
    0x0001814c bl 0x3a8fc                            |             agApi_fwURLFilterEnable_Session2_8fc ();
    0x00018150 bl 0x4cd04                            |             r0 = memset_d04 (r0, r1);
    0x00018154 bl 0x41aa8                            |             r0 = acosNvramConfig_get_aa8 (r0, r1, r2, r3, r4, r5, r6);
    0x00018158 bl 0x46be8                            |             fcn_00046be8 ();
    0x0001815c bl 0x4c560                            |             acosNvramConfig_get_560 ();
    0x00018160 bl 0x413c0                            |             acosNvramConfig_set_3c0 ();
    0x00018164 bl 0x40584                            |             r0 = acosNvramConfig_get_584 (r0);
    0x00018168 bl 0x4e01c                            |             acosNvramConfig_get_1c ();
    0x0001816c bl 0x4440c                            |             acosNvramConfig_match_40c ();
    0x00018170 bl 0x73094                            |             acosNvramConfig_match_94 ();
    0x00018174 bl 0xa1058                            |             system_58 ();
    0x00018178 bl 0x21814                            |             acosNvramConfig_get_814 ();
    0x0001817c ldr r3, [pc, 0x38]                    |             
    0x00018180 ldr r3, [r3, 0xbdc]                   |             r3 = *((uint32_t*) 0x18d94);
    0x00018184 cmp r3, 0                             |             
                                                     |             if (r3 != 0) {
    0x00018188 beq 0x18190                           |                 
    0x0001818c bl 0x293b8                            |                 void (*0x293b8)() ();
                                                     |             }
    0x00018190 bl 0x9dc24                            |             memset_c24 (r0, r1);
    0x00018194 mov r0, 1                             |             r0 = 1;
    0x00018198 bl 0x93c58                            |             fork_c58 (r0, r1);
                                                     |         }
    0x0001819c ldr r1, [pc, 0x88]                    |         r1 = *((uint32_t*) 0x18228);
    0x000181a0 ldr r0, [pc, 0x80]                    |         r0 = "restart_httpd";
    0x000181a4 bl 0xdba8                             |         acosNvramConfig_set ();
    0x000181a8 mov r0, 0x50                          |         r0 = 0x50;
    0x000181ac bl 0x14fcc                            |         void (*0x14fcc)(uint32_t) (r0);
    0x000181b0 mov r0, 0                             |         r0 = 0;
                                                     |     }
                                                     | label_8:
    0x000181b4 add sp, sp, 0x24                      |     
    0x000181b8 pop {r4, r5, r6, r7, r8, sl, pc}      |     
                                                     | }
